var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/SpaceHistory.html",[0,0.123,1,1.229]],["body/classes/SpaceHistory.html",[0,0.168,1,2.012,2,0.602,3,0.765,4,0.322,5,0.894,6,0.602,7,1.383,8,2.336,9,1.489,10,1.691,11,1.271,12,0.602,13,0.402,14,0.932,15,1.844,16,2.364,17,2.364,18,3.363,19,2.364,20,0.602,21,1.718,22,1.753,23,1.387,24,2.228,25,1.139,26,0.936,27,0.602,28,0.079,29,1.139,30,1.506,31,0.602,32,2.703,33,1.44,34,1.718,35,2.101,36,1.44,37,1.781,38,1.44,39,1.558,40,0.936,41,1.36,42,0.602,43,1.139,44,1.139,45,0.402,46,1.383,47,1.111,48,1.282,49,1.86,50,1.579,51,1.111,52,0.974,53,1.111,54,1.111,55,1.111,56,1.111,57,1.111,58,1.111,59,1.111,60,1.111,61,1.111,62,1.111,63,1.111,64,1.111,65,1.111,66,1.111,67,1.111,68,1.529,69,0.602,70,1.903,71,0.402,72,1.844,73,0.932,74,0.932,75,1.053,76,1.852,77,1.111,78,1.111,79,1.111,80,1.111,81,2.364,82,1.111,83,1.111,84,1.111,85,1.111,86,1.111,87,1.111,88,1.111,89,0.894,90,1.111,91,1.111,92,1.111,93,1.111,94,1.111,95,1.718,96,1.111,97,1.111,98,1.718,99,1.111,100,1.111,101,1.111,102,1.111,103,0.602,104,0.732,105,0.732,106,1.132,107,1.111,108,0.732,109,1.111,110,0.602,111,1.718,112,0.894,113,0.602,114,0.602,115,1.111,116,1.111,117,1.111,118,1.111,119,1.111,120,1.111,121,1.111,122,1.111,123,1.111,124,1.111,125,1.466,126,1.111,127,1.111,128,1.111,129,1.111,130,1.111,131,1.111,132,1.111,133,1.111,134,1.111,135,1.111,136,1.053,137,1.111,138,1.111,139,1.111,140,1.111,141,1.111,142,1.111,143,1.111,144,1.111,145,1.111,146,1.111,147,1.111,148,1.111,149,1.111,150,1.111,151,1.111,152,1.111,153,1.111,154,1.111,155,1.111,156,1.111,157,0.932,158,0.602,159,0.602,160,1.111,161,0.622,162,1.621,163,0.602,164,0.602,165,0.602,166,0.602,167,1.139,168,0.602,169,0.602,170,0.602,171,1.111,172,1.111,173,1.111,174,1.111,175,1.111,176,1.111,177,1.111,178,1.111,179,2.101,180,1.111,181,1.111,182,1.111,183,1.111,184,0.932,185,0.932,186,0.602,187,0.602,188,1.111,189,1.111,190,1.111,191,1.111,192,1.111,193,1.111,194,1.111,195,1.111,196,1.111,197,1.111,198,1.111,199,1.111,200,0.602,201,0.602,202,0.602,203,0.602,204,1.111,205,1.111,206,1.111,207,1.111,208,1.111,209,1.111,210,1.111,211,1.111,212,1.111,213,1.111,214,1.111,215,1.111,216,0.036,217,0.036]],["title/classes/V8EventLoop.html",[0,0.123,218,1.229]],["body/classes/V8EventLoop.html",[0,0.154,2,0.722,3,0.877,4,0.386,6,0.722,8,1.909,9,1.4,11,1.309,12,0.722,13,0.482,14,1.068,15,1.882,20,0.722,22,1.882,23,1.76,25,1.068,26,0.877,27,1.501,28,0.079,29,1.463,30,1.445,31,1.501,40,0.877,41,1.371,42,0.722,43,1.406,44,1.406,45,0.482,48,1.068,49,1.76,50,1.626,52,0.571,68,1.816,69,1.068,71,0.714,73,1.272,74,1.272,75,1.371,76,1.843,89,1.071,103,1.572,104,1.298,105,2.108,106,1.708,108,2.028,110,1.068,113,0.722,114,0.722,125,0.722,136,1.045,157,1.572,158,1.068,159,1.272,161,0.939,162,1.816,163,1.406,164,0.722,165,0.722,166,1.406,167,1.501,168,1.068,169,1.068,170,0.722,184,1.406,185,1.406,186,1.068,187,0.722,200,1.068,201,1.068,202,1.068,203,0.722,216,0.042,217,0.042,218,2.238,219,1.331,220,1.705,221,3.145,222,3.361,223,1.298,224,1.298,225,2.554,226,1.298,227,1.298,228,2.554,229,1.726,230,2.554,231,3.588,232,1.97,233,0.722,234,1.726,235,1.726,236,1.726,237,1.726,238,2.554,239,1.726,240,1.97,241,1.585,242,1.726,243,1.726,244,1.726,245,1.331,246,1.331,247,1.726,248,1.726,249,1.331,250,1.726,251,1.726,252,1.585,253,1.726,254,1.726,255,1.97,256,1.331,257,1.726,258,1.726,259,1.726,260,1.726,261,1.331,262,1.726,263,1.726,264,1.726,265,1.726,266,1.726,267,1.726,268,1.726,269,1.726,270,1.726,271,1.726]],["title/classes/V8GCMetrics.html",[0,0.123,272,1.229]],["body/classes/V8GCMetrics.html",[0,0.142,2,0.626,3,0.788,4,0.334,6,0.626,7,1.424,9,1.436,11,1.295,12,0.626,13,0.418,14,0.96,15,1.845,20,0.626,22,1.845,23,1.767,25,0.96,26,0.788,27,1.309,28,0.079,29,1.398,30,1.498,31,1.309,40,0.959,41,1.313,42,0.626,43,1.309,44,1.309,45,0.418,48,0.96,49,1.767,50,1.489,52,0.909,68,1.767,69,0.96,71,0.78,73,1.167,74,1.167,75,1.313,76,1.901,103,1.915,110,0.96,113,0.626,114,0.626,125,0.626,136,1.075,157,1.489,158,0.96,159,0.96,161,0.874,162,1.749,163,1.309,164,0.626,165,0.626,166,1.309,167,1.411,168,0.96,169,0.96,170,0.626,184,1.309,185,1.309,186,0.96,187,0.626,200,0.96,201,0.96,202,0.96,203,0.626,216,0.037,217,0.037,220,1.167,223,1.166,224,1.166,226,1.166,227,1.166,233,0.626,249,1.155,272,2.229,273,0.929,274,1.854,275,3.129,276,3.129,277,3.129,278,3.129,279,3.129,280,3.92,281,2.295,282,1.497,283,3.29,284,3.374,285,2.295,286,2.295,287,2.153,288,1.497,289,2.295,290,2.295,291,1.497,292,2.791,293,1.497,294,1.497,295,2.791,296,1.497,297,2.295,298,1.424,299,1.497,300,1.497,301,1.497,302,1.497,303,1.497,304,1.497,305,1.497,306,3.56,307,1.155,308,1.155,309,0.929,310,1.497,311,3.374,312,3.374,313,1.497,314,1.497,315,1.497,316,1.497,317,1.497,318,1.497,319,1.497,320,1.497,321,1.497,322,1.497,323,1.497,324,1.497,325,1.497,326,1.497,327,1.497,328,1.497,329,1.497,330,1.497,331,1.497,332,1.497,333,1.497,334,1.497,335,1.497,336,3.374,337,1.497,338,1.497,339,3.374,340,1.497,341,1.497,342,1.497,343,1.497,344,1.497,345,1.497,346,1.497,347,1.497,348,1.497,349,1.497,350,1.497,351,1.497,352,1.497,353,1.497,354,1.497,355,1.497,356,1.497,357,1.497,358,1.497,359,1.497,360,1.497,361,1.497,362,1.497,363,1.497]],["title/classes/V8MemoryMetrics.html",[0,0.123,72,1.012]],["body/classes/V8MemoryMetrics.html",[0,0.154,1,1.797,2,0.499,3,0.66,4,0.267,5,0.741,6,0.499,7,0.741,8,2.325,9,1.529,10,1.879,11,1.28,12,0.499,13,0.334,14,0.804,15,1.828,16,0.921,17,0.921,18,3.256,19,0.921,20,0.499,21,0.921,22,1.8,23,1.752,25,1.008,26,0.828,27,1.155,28,0.079,29,1.315,30,1.529,31,1.155,32,2.335,34,0.921,35,1.859,37,1.855,39,1.538,40,0.828,41,1.381,42,0.499,43,1.155,44,1.155,45,0.334,46,1.192,47,0.921,48,1.155,49,1.81,50,1.479,51,0.921,52,0.988,53,0.921,54,0.921,55,0.921,56,0.921,57,0.921,58,0.921,59,0.921,60,0.921,61,0.921,62,0.921,63,0.921,64,0.921,65,0.921,66,0.921,67,0.921,68,1.681,69,0.804,70,2.195,71,0.537,72,1.81,73,1.008,74,1.008,75,1.215,76,1.92,77,1.482,78,1.482,79,1.482,80,1.482,81,2.728,82,2.131,83,1.482,84,1.482,85,2.131,86,1.482,87,2.131,88,1.482,89,1.192,90,1.482,91,2.131,92,1.482,93,2.131,94,1.482,95,2.131,96,2.131,97,1.482,98,2.131,99,2.131,100,1.482,101,2.131,102,1.482,103,0.804,104,0.976,105,0.976,106,1.404,107,2.131,108,1.225,109,0.921,110,0.804,111,2.131,112,0.741,113,0.499,114,0.499,115,0.921,116,0.921,117,0.921,118,0.921,119,0.921,120,0.921,121,0.921,122,0.921,123,0.921,124,0.921,125,1.353,126,0.921,127,0.921,128,0.921,129,0.921,130,0.921,131,0.921,132,0.921,133,0.921,134,0.921,135,0.921,136,0.949,137,0.921,138,0.921,139,0.921,140,0.921,141,0.921,142,0.921,143,0.921,144,0.921,145,0.921,146,0.921,147,0.921,148,0.921,149,0.921,150,0.921,151,0.921,152,0.921,153,0.921,154,0.921,155,0.921,156,0.921,157,1.353,158,0.804,159,0.804,160,0.921,161,0.772,162,1.632,163,1.155,164,0.499,165,0.499,166,1.155,167,1.266,168,0.804,169,0.804,170,0.499,171,0.921,172,0.921,173,0.921,174,0.921,175,0.921,176,0.921,177,0.921,178,0.921,179,1.859,180,0.921,181,0.921,182,0.921,183,0.921,184,1.155,185,1.155,186,0.804,187,0.499,188,0.921,189,0.921,190,0.921,191,0.921,192,0.921,193,0.921,194,0.921,195,0.921,196,0.921,197,0.921,198,0.921,199,0.921,200,0.804,201,0.804,202,0.804,203,0.499,204,0.921,205,0.921,206,0.921,207,0.921,208,0.921,209,0.921,210,0.921,211,0.921,212,0.921,213,0.921,214,0.921,215,0.921,216,0.031,217,0.031,223,0.976,224,0.976,226,0.976,227,0.976,233,1.567,364,1.921,365,1.194,366,1.194,367,1.194,368,1.194,369,1.194,370,1.194,371,1.194,372,1.194,373,1.194,374,1.194,375,1.194,376,1.194,377,1.194,378,1.194,379,1.194,380,1.194]],["title/classes/V8ProcessMetrics.html",[0,0.123,381,1.229]],["body/classes/V8ProcessMetrics.html",[0,0.136,2,0.586,3,0.749,4,0.313,6,0.586,8,1.953,9,1.415,11,1.288,12,0.586,13,0.391,14,0.912,15,1.826,20,0.586,22,1.826,23,1.816,25,0.912,26,0.749,27,1.263,28,0.079,29,1.375,30,1.5,31,1.263,37,1.535,40,0.749,41,1.285,42,0.586,43,1.263,44,1.263,45,0.391,48,0.912,49,1.761,50,1.45,52,0.774,68,1.743,69,0.912,71,0.609,73,1.12,74,1.12,75,1.285,76,1.945,103,1.45,104,1.108,105,1.996,106,1.535,108,1.108,110,0.912,112,0.87,113,0.586,114,0.586,125,0.586,136,1.19,157,1.45,158,0.912,159,1.45,161,0.844,162,1.791,163,1.263,164,0.586,165,0.586,166,1.263,167,1.369,168,0.912,169,0.912,170,0.586,184,1.263,185,1.263,186,0.912,187,0.586,200,0.912,201,0.912,202,0.912,203,0.586,216,0.036,217,0.036,223,1.108,224,1.108,226,1.108,227,1.108,232,2.065,233,0.586,245,1.081,246,1.081,252,1.353,255,1.682,256,1.081,261,1.081,298,2.151,381,2.219,382,1.081,383,3.02,384,3.02,385,3.02,386,3.02,387,3.02,388,3.02,389,3.02,390,3.02,391,3.02,392,3.02,393,2.18,394,1.401,395,3.929,396,3.466,397,2.677,398,3.02,399,1.401,400,2.677,401,4.119,402,1.401,403,4.002,404,2.524,405,2.886,406,1.401,407,1.401,408,2.524,409,3.02,410,2.18,411,2.18,412,1.401,413,1.401,414,1.401,415,1.401,416,1.401,417,1.401,418,1.401,419,1.401,420,1.401,421,1.401,422,1.401,423,1.401,424,1.401,425,2.677,426,2.677,427,2.677,428,1.401,429,1.401,430,1.401,431,1.401,432,1.401,433,1.401,434,1.401,435,1.401,436,1.401,437,1.401,438,1.401,439,1.401,440,1.401,441,1.401,442,1.401,443,1.401,444,1.401,445,1.401,446,1.401,447,1.401,448,1.401,449,1.401,450,1.401,451,1.401,452,1.401,453,1.401,454,1.401,455,1.401,456,1.401,457,1.401,458,1.401,459,1.401,460,1.401,461,2.18,462,2.18,463,1.401,464,1.401,465,1.401,466,1.401,467,2.18,468,1.401,469,1.401,470,1.401,471,1.401,472,2.18,473,1.401,474,1.401,475,1.401,476,1.401,477,1.401,478,1.401]],["title/coverage.html",[479,2.012]],["body/coverage.html",[0,0.229,1,1.744,4,0.767,5,2.508,28,0.076,30,1.179,52,0.767,72,1.435,216,0.066,217,0.066,218,1.744,219,2.647,272,1.744,273,2.508,274,1.435,381,1.744,382,2.647,479,2.13,480,2.647,481,3.432,482,2.647,483,4.523,484,3.432,485,3.432,486,2.13,487,3.432,488,3.432,489,3.432,490,3.432,491,3.432,492,2.647,493,2.647]],["title/dependencies.html",[494,2.05,495,2.232]],["body/dependencies.html",[3,1.249,11,1.016,28,0.075,41,1.249,45,1.016,216,0.068,217,0.068,274,1.521,309,2.256,495,2.804,496,3.635,497,3.635,498,3.635,499,3.635]],["title/index.html",[13,0.573,161,0.573,241,1.272]],["body/index.html",[10,1.818,11,1.266,26,1.006,28,0.078,29,1.443,37,1.488,39,1.488,40,1.261,45,1.174,46,1.818,52,0.939,70,2.278,71,1.026,72,1.535,75,1.006,136,1.486,216,0.06,217,0.06,218,1.865,220,1.225,221,2.259,240,2.259,272,1.865,274,1.677,283,2.259,298,1.818,381,1.488,404,2.259,405,2.259,408,2.259,500,4.202,501,2.929,502,3.67,503,2.929,504,2.929,505,2.929,506,2.929,507,2.929,508,2.929,509,3.67,510,3.67,511,4.008,512,2.929,513,2.929,514,2.929,515,2.929,516,2.929,517,2.929,518,3.67,519,2.929,520,2.929,521,2.929,522,2.929,523,2.929,524,2.929,525,4.202,526,4.202,527,2.929,528,2.929,529,2.929,530,2.929,531,2.929,532,2.929,533,2.929,534,2.929,535,2.929,536,2.929,537,2.929,538,2.929,539,2.929,540,2.929,541,2.259]],["title/license.html",[161,0.573,241,1.272,542,1.581]],["body/license.html",[4,0.708,28,0.063,39,1.958,216,0.063,217,0.063,220,1.325,480,2.444,541,2.444,542,2.444,543,4.151,544,3.168,545,3.168,546,3.852,547,3.168,548,3.168,549,3.168,550,3.168,551,3.852,552,3.168,553,4.319,554,4.63,555,3.168,556,3.852,557,4.151,558,3.168,559,4.151,560,3.852,561,3.168,562,3.168,563,3.168,564,3.168,565,3.168,566,3.168,567,3.168,568,3.168,569,3.168,570,3.168,571,3.168,572,3.168,573,3.168,574,3.168,575,3.852,576,3.852,577,3.168,578,3.168,579,3.168,580,3.852,581,3.168,582,3.168,583,3.168,584,3.168,585,3.168,586,3.168,587,3.168,588,3.168,589,3.168,590,3.168,591,3.168,592,3.168,593,3.168,594,3.168,595,3.168,596,3.168,597,3.168,598,3.168,599,3.168,600,3.168,601,3.168,602,3.168]],["title/modules.html",[603,2.501]],["body/modules.html",[28,0.069,216,0.069,217,0.069,603,2.875]],["title/overview.html",[604,2.501]],["body/overview.html",[0,0.188,28,0.069,216,0.069,217,0.069,604,2.864,605,3.713]],["title/unit-test.html",[606,2.015,607,2.015]],["body/unit-test.html",[4,0.775,28,0.077,52,0.775,216,0.066,217,0.066,252,2.153,479,2.153,482,2.676,492,2.676,493,2.676,606,2.676,607,2.676,608,3.469,609,3.469,610,4.067,611,3.469,612,4.067,613,3.469,614,3.469,615,3.469,616,3.469,617,3.469,618,3.469,619,3.469,620,4.067,621,3.469,622,3.469,623,3.469,624,3.469,625,3.469,626,3.469]],["title/miscellaneous/variables.html",[486,1.796,627,1.581]],["body/miscellaneous/variables.html",[9,1.237,13,1.006,28,0.071,71,1.006,216,0.068,217,0.068,220,1.738,233,1.506,273,2.235,274,1.884,287,2.777,307,2.777,308,2.777,309,2.235,486,2.235,627,2.777,628,3.601]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":614,"title":{},"body":{"unit-test.html":{}}}],["0.5.9",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["0/5",{"_index":615,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":337,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["1.15.0",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":623,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":112,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["12/12",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":625,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":346,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["15/15",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["16/20",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["1e9",{"_index":269,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["2",{"_index":340,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["2017",{"_index":545,"title":{},"body":{"license.html":{}}}],["33",{"_index":622,"title":{},"body":{"unit-test.html":{}}}],["4",{"_index":342,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["5",{"_index":605,"title":{},"body":{"overview.html":{}}}],["500",{"_index":260,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["51/63",{"_index":618,"title":{},"body":{"unit-test.html":{}}}],["52/64",{"_index":613,"title":{},"body":{"unit-test.html":{}}}],["6/6",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":344,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["8/9",{"_index":617,"title":{},"body":{"unit-test.html":{}}}],["80",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":612,"title":{},"body":{"unit-test.html":{}}}],["85",{"_index":620,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":624,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":616,"title":{},"body":{"unit-test.html":{}}}],["93/110",{"_index":626,"title":{},"body":{"unit-test.html":{}}}],["94/111",{"_index":621,"title":{},"body":{"unit-test.html":{}}}],["abov",{"_index":574,"title":{},"body":{"license.html":{}}}],["accordingli",{"_index":185,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["action",{"_index":596,"title":{},"body":{"license.html":{}}}],["activ",{"_index":396,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["active_handl",{"_index":521,"title":{},"body":{"index.html":{}}}],["active_request",{"_index":522,"title":{},"body":{"index.html":{}}}],["activehandl",{"_index":383,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["activerequest",{"_index":384,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["alloc",{"_index":98,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["allrun",{"_index":275,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["and/or",{"_index":567,"title":{},"body":{"license.html":{}}}],["applic",{"_index":535,"title":{},"body":{"index.html":{}}}],["aris",{"_index":600,"title":{},"body":{"license.html":{}}}],["associ",{"_index":555,"title":{},"body":{"license.html":{}}}],["author",{"_index":589,"title":{},"body":{"license.html":{}}}],["avail",{"_index":34,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["availabel",{"_index":84,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["availables",{"_index":16,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["basemetr",{"_index":43,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["basic",{"_index":508,"title":{},"body":{"index.html":{}}}],["be",{"_index":253,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["between",{"_index":250,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["branch",{"_index":608,"title":{},"body":{"unit-test.html":{}}}],["break",{"_index":339,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["c",{"_index":544,"title":{},"body":{"license.html":{}}}],["callback",{"_index":297,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["case",{"_index":336,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["caus",{"_index":534,"title":{},"body":{"index.html":{}}}],["charg",{"_index":550,"title":{},"body":{"license.html":{}}}],["claim",{"_index":592,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"overview.html":{}}}],["clock",{"_index":280,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["code",{"_index":90,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["collect",{"_index":7,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{}}}],["collector",{"_index":501,"title":{},"body":{"index.html":{}}}],["commit",{"_index":251,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["condit",{"_index":573,"title":{},"body":{"license.html":{}}}],["connect",{"_index":602,"title":{},"body":{"license.html":{}}}],["const",{"_index":136,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["constructor",{"_index":20,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["constructor(nam",{"_index":110,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["constructor(spacenam",{"_index":21,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["contain",{"_index":75,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["contract",{"_index":597,"title":{},"body":{"license.html":{}}}],["copi",{"_index":553,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":543,"title":{},"body":{"license.html":{}}}],["count",{"_index":398,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["coverag",{"_index":479,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["cpu",{"_index":403,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpu_usag",{"_index":520,"title":{},"body":{"index.html":{}}}],["cpusystemusag",{"_index":385,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cputotalusag",{"_index":386,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusag",{"_index":467,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusage.system",{"_index":473,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuusage.us",{"_index":470,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["cpuuserusag",{"_index":387,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["creat",{"_index":25,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["damag",{"_index":593,"title":{},"body":{"license.html":{}}}],["data",{"_index":286,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["deal",{"_index":556,"title":{},"body":{"license.html":{}}}],["default",{"_index":233,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"miscellaneous/variables.html":{}}}],["defaultreservoir",{"_index":305,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["defaultreservoir(1024",{"_index":312,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["defin",{"_index":23,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["delay",{"_index":516,"title":{},"body":{"index.html":{}}}],["delta",{"_index":265,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["delta[0",{"_index":268,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["delta[1",{"_index":270,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["depend",{"_index":495,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["differ",{"_index":79,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["distribut",{"_index":565,"title":{},"body":{"license.html":{}}}],["document",{"_index":480,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":249,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{}}}],["emitt",{"_index":287,"title":{},"body":{"classes/V8GCMetrics.html":{},"miscellaneous/variables.html":{}}}],["event",{"_index":220,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["eventemitt",{"_index":284,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["eventloop",{"_index":518,"title":{},"body":{"index.html":{}}}],["eventloop.stop",{"_index":539,"title":{},"body":{"index.html":{}}}],["eventlooplag",{"_index":222,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["exampl",{"_index":12,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["execut",{"_index":89,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{}}}],["export",{"_index":48,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["express",{"_index":582,"title":{},"body":{"license.html":{}}}],["extend",{"_index":73,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["fit",{"_index":585,"title":{},"body":{"license.html":{}}}],["follow",{"_index":572,"title":{},"body":{"license.html":{}}}],["free",{"_index":549,"title":{},"body":{"license.html":{}}}],["function",{"_index":252,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{},"unit-test.html":{}}}],["function(stat",{"_index":332,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["furnish",{"_index":570,"title":{},"body":{"license.html":{}}}],["garbag",{"_index":285,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["gaug",{"_index":78,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["gc",{"_index":274,"title":{},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["gc.stop",{"_index":538,"title":{},"body":{"index.html":{}}}],["get",{"_index":161,"title":{"index.html":{},"license.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["getmetr",{"_index":163,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["getmetriclist",{"_index":166,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["global.setinterv",{"_index":135,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["grant",{"_index":548,"title":{},"body":{"license.html":{}}}],["group",{"_index":167,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["handl",{"_index":397,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["heap",{"_index":81,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapsizelimit",{"_index":96,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapspacestatist",{"_index":137,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapspacestatistics.foreach((heapspacestatist",{"_index":149,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["heapstatist",{"_index":139,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["herebi",{"_index":547,"title":{},"body":{"license.html":{}}}],["histori",{"_index":151,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.removetag(nam",{"_index":212,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.setgroup(group",{"_index":180,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.settag(nam",{"_index":196,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.availablesize.setvalue(heapspacestatistic.space_available_s",{"_index":153,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.removetag(nam",{"_index":213,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.setgroup(group",{"_index":181,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.settag(nam",{"_index":197,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.physicalsize.setvalue(heapspacestatistic.physical_space_s",{"_index":154,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.removetag(nam",{"_index":214,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.setgroup(group",{"_index":182,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.settag(nam",{"_index":198,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.size.setvalue(heapspacestatistic.space_s",{"_index":155,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.removetag(nam",{"_index":215,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.setgroup(group",{"_index":183,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.settag(nam",{"_index":199,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["history.usedsize.setvalue(heapspacestatistic.space_used_s",{"_index":156,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["hold",{"_index":230,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["holder",{"_index":590,"title":{},"body":{"license.html":{}}}],["identifi",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":74,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["impli",{"_index":583,"title":{},"body":{"license.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["includ",{"_index":559,"title":{},"body":{"license.html":{}}}],["increment",{"_index":289,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["incrementalmark",{"_index":318,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["incrementalmarkingrun",{"_index":276,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["inspector",{"_index":45,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":502,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":26,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["intervalref",{"_index":107,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["keep",{"_index":536,"title":{},"body":{"index.html":{}}}],["kind",{"_index":581,"title":{},"body":{"license.html":{}}}],["lag",{"_index":231,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["last",{"_index":410,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lastusag",{"_index":388,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["latenc",{"_index":517,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":594,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":591,"title":{},"body":{"license.html":{}}}],["lib/.../v8gcmetrics.t",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/v8eventloop.t",{"_index":219,"title":{},"body":{"classes/V8EventLoop.html":{},"coverage.html":{}}}],["lib/metrics/v8eventloop.ts:108",{"_index":242,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:122",{"_index":243,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:135",{"_index":237,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:148",{"_index":239,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:28",{"_index":234,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:36",{"_index":229,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:44",{"_index":228,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:73",{"_index":244,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:85",{"_index":236,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8eventloop.ts:97",{"_index":235,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["lib/metrics/v8gcmetrics.t",{"_index":273,"title":{},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/v8gcmetrics.ts:148",{"_index":304,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:158",{"_index":300,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:170",{"_index":299,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:181",{"_index":302,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:199",{"_index":303,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:216",{"_index":301,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:36",{"_index":293,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:44",{"_index":294,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:52",{"_index":291,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:60",{"_index":288,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:68",{"_index":296,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:76",{"_index":282,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8gcmetrics.ts:84",{"_index":281,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["lib/metrics/v8memorymetrics.t",{"_index":5,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{}}}],["lib/metrics/v8memorymetrics.ts:107",{"_index":371,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:115",{"_index":370,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:123",{"_index":373,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:131",{"_index":372,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:139",{"_index":374,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:147",{"_index":365,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:155",{"_index":366,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:163",{"_index":368,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:171",{"_index":364,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:229",{"_index":380,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:239",{"_index":376,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:25",{"_index":36,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:251",{"_index":375,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:262",{"_index":378,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:292",{"_index":379,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:32",{"_index":38,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:320",{"_index":377,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:39",{"_index":33,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:46",{"_index":24,"title":{},"body":{"classes/SpaceHistory.html":{}}}],["lib/metrics/v8memorymetrics.ts:91",{"_index":367,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8memorymetrics.ts:99",{"_index":369,"title":{},"body":{"classes/V8MemoryMetrics.html":{}}}],["lib/metrics/v8processmetrics.t",{"_index":382,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"coverage.html":{}}}],["lib/metrics/v8processmetrics.ts:124",{"_index":419,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:136",{"_index":415,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:148",{"_index":414,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:159",{"_index":417,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:179",{"_index":418,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:198",{"_index":416,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:210",{"_index":420,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:216",{"_index":421,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:223",{"_index":422,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:230",{"_index":423,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:29",{"_index":412,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:37",{"_index":394,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:45",{"_index":399,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:53",{"_index":402,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:61",{"_index":406,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:69",{"_index":407,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:77",{"_index":413,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["lib/metrics/v8processmetrics.ts:85",{"_index":393,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["librari",{"_index":503,"title":{},"body":{"index.html":{}}}],["licens",{"_index":542,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":560,"title":{},"body":{"license.html":{}}}],["line",{"_index":609,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":47,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["loop",{"_index":221,"title":{},"body":{"classes/V8EventLoop.html":{},"index.html":{}}}],["major",{"_index":292,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["majorrun",{"_index":277,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["mallocedmemori",{"_index":99,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["map",{"_index":41,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{}}}],["map.set(metric.getnam",{"_index":165,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["mark",{"_index":290,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["match",{"_index":217,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":95,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["meant",{"_index":504,"title":{},"body":{"index.html":{}}}],["measur",{"_index":248,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["memberof",{"_index":49,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["memori",{"_index":70,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["memorymetr",{"_index":512,"title":{},"body":{"index.html":{}}}],["memorymetrics.stop",{"_index":537,"title":{},"body":{"index.html":{}}}],["merchant",{"_index":584,"title":{},"body":{"license.html":{}}}],["merg",{"_index":563,"title":{},"body":{"license.html":{}}}],["method",{"_index":223,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["metric",{"_index":11,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{},"index.html":{}}}],["metricregistri",{"_index":509,"title":{},"body":{"index.html":{}}}],["metrics.push(this.availables",{"_index":66,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.physicals",{"_index":67,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.s",{"_index":64,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metrics.push(this.useds",{"_index":65,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["metricset",{"_index":44,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["microsecond",{"_index":232,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["minor",{"_index":295,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["minorrun",{"_index":278,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["miscellan",{"_index":627,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":541,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":610,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":562,"title":{},"body":{"license.html":{}}}],["modul",{"_index":603,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotonecount",{"_index":401,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["monotonecounter(\"cpu_usag",{"_index":425,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["nanosec",{"_index":267,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["nanosecond",{"_index":306,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["new",{"_index":52,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["nodej",{"_index":71,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nodejs.cpuusag",{"_index":409,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["nodejs.tim",{"_index":106,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["noninfring",{"_index":588,"title":{},"body":{"license.html":{}}}],["note",{"_index":532,"title":{},"body":{"index.html":{}}}],["notic",{"_index":575,"title":{},"body":{"license.html":{}}}],["npm",{"_index":506,"title":{},"body":{"index.html":{}}}],["number",{"_index":108,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["object",{"_index":411,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["obtain",{"_index":552,"title":{},"body":{"license.html":{}}}],["option",{"_index":31,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["otherwis",{"_index":599,"title":{},"body":{"license.html":{}}}],["out",{"_index":601,"title":{},"body":{"license.html":{}}}],["overview",{"_index":604,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":461,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["p._getactivehandl",{"_index":463,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["p._getactiverequest",{"_index":465,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["packag",{"_index":494,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":50,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["paramet",{"_index":27,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["particular",{"_index":586,"title":{},"body":{"license.html":{}}}],["peakmallocedmemori",{"_index":101,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["permiss",{"_index":546,"title":{},"body":{"license.html":{}}}],["permit",{"_index":569,"title":{},"body":{"license.html":{}}}],["person",{"_index":551,"title":{},"body":{"license.html":{}}}],["phantomcallbackprocess",{"_index":321,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["phantomcallbackprocessingrun",{"_index":279,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["physic",{"_index":35,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["physicals",{"_index":17,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["portion",{"_index":578,"title":{},"body":{"license.html":{}}}],["privat",{"_index":76,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["process",{"_index":298,"title":{},"body":{"classes/V8GCMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["process.cpuusag",{"_index":468,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["process.hrtim",{"_index":259,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["process.hrtime(start",{"_index":266,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["processmetr",{"_index":523,"title":{},"body":{"index.html":{}}}],["processmetric.stop();licens",{"_index":540,"title":{},"body":{"index.html":{}}}],["properti",{"_index":14,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["provid",{"_index":579,"title":{},"body":{"license.html":{}}}],["public",{"_index":15,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["publish",{"_index":564,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":587,"title":{},"body":{"license.html":{}}}],["record",{"_index":158,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["refer",{"_index":104,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["regist",{"_index":525,"title":{},"body":{"index.html":{}}}],["registri",{"_index":510,"title":{},"body":{"index.html":{}}}],["registry.getdefaultclock",{"_index":515,"title":{},"body":{"index.html":{}}}],["registry.registermetric(eventloop",{"_index":529,"title":{},"body":{"index.html":{}}}],["registry.registermetric(gc",{"_index":528,"title":{},"body":{"index.html":{}}}],["registry.registermetric(memorymetr",{"_index":527,"title":{},"body":{"index.html":{}}}],["registry.registermetric(processmetr",{"_index":530,"title":{},"body":{"index.html":{}}}],["relat",{"_index":69,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["remov",{"_index":200,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["removetag",{"_index":224,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["removetag(nam",{"_index":202,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["report",{"_index":240,"title":{},"body":{"classes/V8EventLoop.html":{},"index.html":{}}}],["reporteventlooplag",{"_index":225,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["reporteventlooplag(start",{"_index":238,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["request",{"_index":400,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["require(\"gc",{"_index":308,"title":{},"body":{"classes/V8GCMetrics.html":{},"miscellaneous/variables.html":{}}}],["restrict",{"_index":558,"title":{},"body":{"license.html":{}}}],["result",{"_index":216,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":162,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["right",{"_index":561,"title":{},"body":{"license.html":{}}}],["run",{"_index":283,"title":{},"body":{"classes/V8GCMetrics.html":{},"index.html":{}}}],["sampler",{"_index":111,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["samplerate=1000",{"_index":109,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["save",{"_index":507,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":105,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["scheduler(async",{"_index":256,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["scheduler=setinterv",{"_index":245,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["sell",{"_index":568,"title":{},"body":{"license.html":{}}}],["set",{"_index":68,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setgroup",{"_index":226,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setgroup(group",{"_index":169,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setimmediate((start",{"_index":257,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["setinterv",{"_index":246,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["settag",{"_index":227,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["settag(nam",{"_index":186,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["setup",{"_index":531,"title":{},"body":{"index.html":{}}}],["shall",{"_index":576,"title":{},"body":{"license.html":{}}}],["simplegaug",{"_index":8,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"active_handl",{"_index":434,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"active_request",{"_index":436,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["simplegauge(\"heapsizelimit",{"_index":97,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"mallocedmemori",{"_index":100,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"peakmallocedmemori",{"_index":102,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaceavailables",{"_index":57,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spacephysicals",{"_index":59,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaces",{"_index":53,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"spaceuseds",{"_index":55,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalavailables",{"_index":86,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalheaps",{"_index":83,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalheapsizeexecut",{"_index":92,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"totalphysicals",{"_index":88,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["simplegauge(\"usedheaps",{"_index":94,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["size",{"_index":18,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["slf",{"_index":329,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.allruns.addduration(dur",{"_index":347,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.incrementalmarkingruns.addduration(dur",{"_index":343,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.majorruns.addduration(dur",{"_index":341,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.minorruns.addduration(dur",{"_index":338,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["slf.phantomcallbackprocessingruns.addduration(dur",{"_index":345,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["softwar",{"_index":554,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"dependencies.html":{}}}],["space",{"_index":10,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["spacehistori",{"_index":1,"title":{"classes/SpaceHistory.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{}}}],["spacehistory(\"code_spac",{"_index":129,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"large_object_spac",{"_index":133,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"map_spac",{"_index":131,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"new_spac",{"_index":124,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacehistory(\"old_spac",{"_index":127,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spacenam",{"_index":32,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["spece",{"_index":80,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["specifi",{"_index":201,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["spent",{"_index":427,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["start",{"_index":241,"title":{"index.html":{},"license.html":{}},"body":{"classes/V8EventLoop.html":{}}}],["stat",{"_index":309,"title":{},"body":{"classes/V8GCMetrics.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["statement",{"_index":482,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["statist",{"_index":511,"title":{},"body":{"index.html":{}}}],["stats.gctyp",{"_index":335,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["stats.paus",{"_index":333,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["stop",{"_index":157,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["store",{"_index":77,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["string",{"_index":22,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["subject",{"_index":571,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":566,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":577,"title":{},"body":{"license.html":{}}}],["super",{"_index":113,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["support",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":42,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["switch",{"_index":334,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["system",{"_index":404,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["systemusagemicro",{"_index":472,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["tabl",{"_index":493,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":492,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":184,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["test",{"_index":607,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.activehandl",{"_index":433,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.removetag(nam",{"_index":453,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.setgroup(group",{"_index":443,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.settag(nam",{"_index":448,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activehandles.setvalue(p._getactivehandles().length",{"_index":464,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequest",{"_index":435,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.removetag(nam",{"_index":454,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.setgroup(group",{"_index":444,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.settag(nam",{"_index":449,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.activerequests.setvalue(p._getactiverequests().length",{"_index":466,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.allrun",{"_index":322,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.removetag(nam",{"_index":359,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.setgroup(group",{"_index":349,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.settag(\"typ",{"_index":323,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.allruns.settag(nam",{"_index":354,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.availables",{"_index":56,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.availablesize.settag(\"spac",{"_index":62,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.cpusystemusag",{"_index":424,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.increment(systemusagemicro",{"_index":476,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.removetag(nam",{"_index":455,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.setgroup(group",{"_index":445,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.settag(\"typ",{"_index":428,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpusystemusage.settag(nam",{"_index":450,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusag",{"_index":429,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.increment(userusagemicro",{"_index":477,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.removetag(nam",{"_index":456,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.setgroup(group",{"_index":446,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.settag(\"typ",{"_index":430,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cputotalusage.settag(nam",{"_index":451,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusag",{"_index":431,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.increment(userusagemicro",{"_index":478,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.removetag(nam",{"_index":457,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.setgroup(group",{"_index":447,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.settag(\"typ",{"_index":432,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.cpuuserusage.settag(nam",{"_index":452,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.eventlooplag",{"_index":247,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.removetag(nam",{"_index":264,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.setgroup(group",{"_index":262,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.settag(nam",{"_index":263,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.eventlooplag.setvalue(nanosec",{"_index":271,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.gc",{"_index":330,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.gc.on(\"stat",{"_index":331,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.gc.removealllisten",{"_index":348,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.group",{"_index":170,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.heapsizelimit.removetag(nam",{"_index":209,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.setgroup(group",{"_index":176,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.settag(nam",{"_index":193,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.heapsizelimit.setvalue(heapstatistics.heap_size_limit",{"_index":146,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.incrementalmarkingrun",{"_index":316,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.removetag(nam",{"_index":360,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.setgroup(group",{"_index":350,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.settag(\"typ",{"_index":317,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.incrementalmarkingruns.settag(nam",{"_index":355,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.intervalref",{"_index":134,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.intervalref.unref",{"_index":160,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.lastusag",{"_index":475,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.lastusage.system",{"_index":474,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.lastusage.us",{"_index":471,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.majorrun",{"_index":314,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.removetag(nam",{"_index":361,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.setgroup(group",{"_index":351,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.settag(\"typ",{"_index":315,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.majorruns.settag(nam",{"_index":356,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.mallocedmemory.removetag(nam",{"_index":210,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.setgroup(group",{"_index":177,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.settag(nam",{"_index":194,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.mallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":147,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metr",{"_index":125,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.metrics.foreach((metr",{"_index":164,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.activehandl",{"_index":437,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.activerequest",{"_index":438,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.allrun",{"_index":324,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.cpusystemusag",{"_index":439,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.cputotalusag",{"_index":440,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.cpuuserusag",{"_index":441,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.metrics.push(this.eventlooplag",{"_index":254,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.metrics.push(this.heapsizelimit",{"_index":120,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.incrementalmarkingrun",{"_index":325,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.majorrun",{"_index":326,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.mallocedmemori",{"_index":121,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.minorrun",{"_index":327,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.peakmallocedmemori",{"_index":122,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.phantomcallbackprocessingrun",{"_index":328,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.metrics.push(this.totalavailables",{"_index":117,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalheaps",{"_index":115,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalheapsizeexecut",{"_index":118,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.totalphysicals",{"_index":116,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.metrics.push(this.usedheaps",{"_index":119,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.minorrun",{"_index":310,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.removetag(nam",{"_index":362,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.setgroup(group",{"_index":352,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.settag(\"typ",{"_index":313,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.minorruns.settag(nam",{"_index":357,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.nam",{"_index":114,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.peakmallocedmemory.removetag(nam",{"_index":211,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.setgroup(group",{"_index":178,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.settag(nam",{"_index":195,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.peakmallocedmemory.setvalue(heapstatistics.heap_size_limit",{"_index":148,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.phantomcallbackprocessingrun",{"_index":319,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.removetag(nam",{"_index":363,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.setgroup(group",{"_index":353,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.settag(\"typ",{"_index":320,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.phantomcallbackprocessingruns.settag(nam",{"_index":358,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["this.physicals",{"_index":58,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.physicalsize.settag(\"spac",{"_index":63,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.reporteventlooplag(start",{"_index":258,"title":{},"body":{"classes/V8EventLoop.html":{}}}],["this.siz",{"_index":51,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.size.settag(\"spac",{"_index":60,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.foreach((histori",{"_index":179,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.get(heapspacestatistic.space_nam",{"_index":152,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.has(heapspacestatistic.space_nam",{"_index":150,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"code_spac",{"_index":128,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"large_object_spac",{"_index":132,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"map_spac",{"_index":130,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"new_spac",{"_index":123,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.spaces.set(\"old_spac",{"_index":126,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.tags.delete(nam",{"_index":203,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.tags.set(nam",{"_index":187,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.tim",{"_index":255,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.timer.unref",{"_index":261,"title":{},"body":{"classes/V8EventLoop.html":{},"classes/V8ProcessMetrics.html":{}}}],["this.totalavailablesize.removetag(nam",{"_index":205,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.setgroup(group",{"_index":172,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.settag(nam",{"_index":189,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalavailablesize.setvalue(heapstatistics.total_available_s",{"_index":143,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.removetag(nam",{"_index":204,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.setgroup(group",{"_index":171,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.settag(nam",{"_index":188,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsize.setvalue(heapstatistics.total_heap_s",{"_index":141,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.removetag(nam",{"_index":207,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.setgroup(group",{"_index":174,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.settag(nam",{"_index":191,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalheapsizeexecutable.setvalue(heapstatistics.total_heap_size_execut",{"_index":144,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.removetag(nam",{"_index":206,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.setgroup(group",{"_index":173,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.settag(nam",{"_index":190,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.totalphysicalsize.setvalue(heapstatistics.total_physical_s",{"_index":142,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.upd",{"_index":442,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updateactivehandl",{"_index":458,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updateactiverequest",{"_index":459,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.updatecpuusag",{"_index":460,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["this.usedheapsize.removetag(nam",{"_index":208,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.setgroup(group",{"_index":175,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.settag(nam",{"_index":192,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedheapsize.setvalue(heapstatistics.used_heap_s",{"_index":145,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.useds",{"_index":54,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["this.usedsize.settag(\"spac",{"_index":61,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["time",{"_index":426,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["timer",{"_index":103,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["timer(clock",{"_index":311,"title":{},"body":{"classes/V8GCMetrics.html":{}}}],["tort",{"_index":598,"title":{},"body":{"license.html":{}}}],["total",{"_index":37,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["totalavailables",{"_index":85,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalheaps",{"_index":82,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalheapsizeexecut",{"_index":91,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["totalphysicals",{"_index":87,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["track",{"_index":395,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["type",{"_index":30,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"coverage.html":{}}}],["typeof",{"_index":462,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["typescript",{"_index":505,"title":{},"body":{"index.html":{}}}],["und",{"_index":526,"title":{},"body":{"index.html":{}}}],["unit",{"_index":606,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["unstop",{"_index":533,"title":{},"body":{"index.html":{}}}],["updat",{"_index":389,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updateactivehandl",{"_index":390,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updateactiverequest",{"_index":391,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["updatecpuusag",{"_index":392,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["us",{"_index":39,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":405,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["usedheaps",{"_index":93,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["useds",{"_index":19,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["user",{"_index":408,"title":{},"body":{"classes/V8ProcessMetrics.html":{},"index.html":{}}}],["userusagemicro",{"_index":469,"title":{},"body":{"classes/V8ProcessMetrics.html":{}}}],["v8",{"_index":46,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"index.html":{}}}],["v8.getheapspacestatist",{"_index":138,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["v8.getheapstatist",{"_index":140,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{}}}],["v8eventloop",{"_index":218,"title":{"classes/V8EventLoop.html":{}},"body":{"classes/V8EventLoop.html":{},"coverage.html":{},"index.html":{}}}],["v8eventloop(\"eventloop",{"_index":519,"title":{},"body":{"index.html":{}}}],["v8gcmetric",{"_index":272,"title":{"classes/V8GCMetrics.html":{}},"body":{"classes/V8GCMetrics.html":{},"coverage.html":{},"index.html":{}}}],["v8gcmetrics(\"gc",{"_index":514,"title":{},"body":{"index.html":{}}}],["v8memorymetr",{"_index":72,"title":{"classes/V8MemoryMetrics.html":{}},"body":{"classes/SpaceHistory.html":{},"classes/V8MemoryMetrics.html":{},"coverage.html":{},"index.html":{}}}],["v8memorymetrics(\"v8",{"_index":513,"title":{},"body":{"index.html":{}}}],["v8processmetr",{"_index":381,"title":{"classes/V8ProcessMetrics.html":{}},"body":{"classes/V8ProcessMetrics.html":{},"coverage.html":{},"index.html":{}}}],["v8processmetrics(\"process",{"_index":524,"title":{},"body":{"index.html":{}}}],["valu",{"_index":9,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":486,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["vm",{"_index":500,"title":{},"body":{"index.html":{}}}],["vm/lib/metrics/v8gcmetrics.t",{"_index":611,"title":{},"body":{"unit-test.html":{}}}],["vm/lib/metrics/v8memorymetrics.t",{"_index":619,"title":{},"body":{"unit-test.html":{}}}],["void",{"_index":159,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["warranti",{"_index":580,"title":{},"body":{"license.html":{}}}],["well",{"_index":168,"title":{},"body":{"classes/SpaceHistory.html":{},"classes/V8EventLoop.html":{},"classes/V8GCMetrics.html":{},"classes/V8MemoryMetrics.html":{},"classes/V8ProcessMetrics.html":{}}}],["whether",{"_index":595,"title":{},"body":{"license.html":{}}}],["within",{"_index":307,"title":{},"body":{"classes/V8GCMetrics.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":557,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/SpaceHistory.html":{"url":"classes/SpaceHistory.html","title":"class - SpaceHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SpaceHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8MemoryMetrics.ts\n        \n\n            \n                Description\n            \n            \n                A collection of SimpleGauge values for space metrics.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                availableSize\n                            \n                            \n                                    Public\n                                physicalSize\n                            \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                usedSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(spaceName: string, metrics: Metric[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8MemoryMetrics.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of SpaceHistory.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spaceName\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metrics\n                                                  \n                                                        \n                                                                    Metric[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            availableSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        availableSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:39\n                            \n                        \n\n                \n                    \n                        Available size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            physicalSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        physicalSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:46\n                            \n                        \n\n                \n                    \n                        Physical size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        size:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:25\n                            \n                        \n\n                \n                    \n                        Total size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            usedSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usedSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:32\n                            \n                        \n\n                \n                    \n                        Used size.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    SimpleGauge,\n} from \"inspector-metrics\";\nimport * as v8 from \"v8\";\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n\n    /**\n     * Total size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public size: SimpleGauge;\n    /**\n     * Used size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public usedSize: SimpleGauge;\n    /**\n     * Available size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public availableSize: SimpleGauge;\n    /**\n     * Physical size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public physicalSize: SimpleGauge;\n\n    /**\n     * Creates an instance of SpaceHistory.\n     *\n     * @param {string} spaceName\n     * @param {Metric[]} metrics\n     * @memberof SpaceHistory\n     */\n    public constructor(spaceName: string, metrics: Metric[]) {\n        this.size = new SimpleGauge(\"spaceSize\");\n        this.usedSize = new SimpleGauge(\"spaceUsedSize\");\n        this.availableSize = new SimpleGauge(\"spaceAvailableSize\");\n        this.physicalSize = new SimpleGauge(\"spacePhysicalSize\");\n\n        this.size.setTag(\"space\", spaceName);\n        this.usedSize.setTag(\"space\", spaceName);\n        this.availableSize.setTag(\"space\", spaceName);\n        this.physicalSize.setTag(\"space\", spaceName);\n\n        metrics.push(this.size);\n        metrics.push(this.usedSize);\n        metrics.push(this.availableSize);\n        metrics.push(this.physicalSize);\n    }\n\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains all the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Stores the size gauges for different speces.\n     *\n     * @private\n     * @type {Map}\n     * @memberof V8MemoryMetrics\n     */\n    private spaces: Map = new Map();\n    /**\n     * Total heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSize: SimpleGauge = new SimpleGauge(\"totalHeapSize\");\n    /**\n     * Total availabel size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalAvailableSize: SimpleGauge = new SimpleGauge(\"totalAvailableSize\");\n    /**\n     * Total physical size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalPhysicalSize: SimpleGauge = new SimpleGauge(\"totalPhysicalSize\");\n    /**\n     * Total heap size for executable code.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSizeExecutable: SimpleGauge = new SimpleGauge(\"totalHeapSizeExecutable\");\n    /**\n     * Used heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private usedHeapSize: SimpleGauge = new SimpleGauge(\"usedHeapSize\");\n    /**\n     * Maximum heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private heapSizeLimit: SimpleGauge = new SimpleGauge(\"heapSizeLimit\");\n    /**\n     * Allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private mallocedMemory: SimpleGauge = new SimpleGauge(\"mallocedMemory\");\n    /**\n     * Maximum allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private peakMallocedMemory: SimpleGauge = new SimpleGauge(\"peakMallocedMemory\");\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8MemoryMetrics\n     */\n    private intervalRef: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8MemoryMetrics.\n     *\n     * @param {string} name\n     * @param {number} [sampleRate=1000]\n     * @memberof V8MemoryMetrics\n     */\n    public constructor(name: string, sampleRate = 1000) {\n        super();\n        this.name = name;\n\n        this.metrics.push(this.totalHeapSize);\n        this.metrics.push(this.totalPhysicalSize);\n        this.metrics.push(this.totalAvailableSize);\n        this.metrics.push(this.totalHeapSizeExecutable);\n        this.metrics.push(this.usedHeapSize);\n        this.metrics.push(this.heapSizeLimit);\n        this.metrics.push(this.mallocedMemory);\n        this.metrics.push(this.peakMallocedMemory);\n\n        this.spaces.set(\"new_space\", new SpaceHistory(\"new_space\", this.metrics));\n        this.spaces.set(\"old_space\", new SpaceHistory(\"old_space\", this.metrics));\n        this.spaces.set(\"code_space\", new SpaceHistory(\"code_space\", this.metrics));\n        this.spaces.set(\"map_space\", new SpaceHistory(\"map_space\", this.metrics));\n        this.spaces.set(\"large_object_space\", new SpaceHistory(\"large_object_space\", this.metrics));\n\n        this.intervalRef = global.setInterval(() => {\n            const heapSpaceStatistics = v8.getHeapSpaceStatistics();\n            const heapStatistics = v8.getHeapStatistics();\n\n            this.totalHeapSize.setValue(heapStatistics.total_heap_size);\n            this.totalPhysicalSize.setValue(heapStatistics.total_physical_size);\n            this.totalAvailableSize.setValue(heapStatistics.total_available_size);\n            this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable);\n            this.usedHeapSize.setValue(heapStatistics.used_heap_size);\n            this.heapSizeLimit.setValue(heapStatistics.heap_size_limit);\n            this.mallocedMemory.setValue(heapStatistics.heap_size_limit);\n            this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit);\n\n            heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n                if (this.spaces.has(heapSpaceStatistic.space_name)) {\n                    const history = this.spaces.get(heapSpaceStatistic.space_name);\n                    history.availableSize.setValue(heapSpaceStatistic.space_available_size);\n                    history.physicalSize.setValue(heapSpaceStatistic.physical_space_size);\n                    history.size.setValue(heapSpaceStatistic.space_size);\n                    history.usedSize.setValue(heapSpaceStatistic.space_used_size);\n                }\n            });\n        }, sampleRate);\n    }\n\n    /**\n     * Stops the recording of memory metrics.\n     *\n     * @memberof V8MemoryMetrics\n     */\n    public stop(): void {\n        this.intervalRef.unref();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @returns {this}\n     * @memberof V8MemoryMetrics\n     */\n    public setGroup(group: string): this {\n        this.group = group;\n\n        this.totalHeapSize.setGroup(group);\n        this.totalAvailableSize.setGroup(group);\n        this.totalPhysicalSize.setGroup(group);\n        this.totalHeapSizeExecutable.setGroup(group);\n        this.usedHeapSize.setGroup(group);\n        this.heapSizeLimit.setGroup(group);\n        this.mallocedMemory.setGroup(group);\n        this.peakMallocedMemory.setGroup(group);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setGroup(group);\n            history.physicalSize.setGroup(group);\n            history.size.setGroup(group);\n            history.usedSize.setGroup(group);\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof V8MemoryMetrics\n     */\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n\n        this.totalHeapSize.setTag(name, value);\n        this.totalAvailableSize.setTag(name, value);\n        this.totalPhysicalSize.setTag(name, value);\n        this.totalHeapSizeExecutable.setTag(name, value);\n        this.usedHeapSize.setTag(name, value);\n        this.heapSizeLimit.setTag(name, value);\n        this.mallocedMemory.setTag(name, value);\n        this.peakMallocedMemory.setTag(name, value);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setTag(name, value);\n            history.physicalSize.setTag(name, value);\n            history.size.setTag(name, value);\n            history.usedSize.setTag(name, value);\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8MemoryMetrics\n     */\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n\n        this.totalHeapSize.removeTag(name);\n        this.totalAvailableSize.removeTag(name);\n        this.totalPhysicalSize.removeTag(name);\n        this.totalHeapSizeExecutable.removeTag(name);\n        this.usedHeapSize.removeTag(name);\n        this.heapSizeLimit.removeTag(name);\n        this.mallocedMemory.removeTag(name);\n        this.peakMallocedMemory.removeTag(name);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.removeTag(name);\n            history.physicalSize.removeTag(name);\n            history.size.removeTag(name);\n            history.usedSize.removeTag(name);\n        });\n\n        return this;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8EventLoop.html":{"url":"classes/V8EventLoop.html","title":"class - V8EventLoop","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8EventLoop\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8EventLoop.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the nodejs event loop.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                eventLoopLag\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Private\n                                reportEventloopLag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, scheduler: Scheduler)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8EventLoop.ts:44\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8EventLoop.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                    Scheduler\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            eventLoopLag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        eventLoopLag:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:36\n                            \n                        \n\n                \n                    \n                        Holds the event-loop lag in microseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:28\n                            \n                        \n\n                \n                    \n                        Contains all the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:44\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:85\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:135\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reportEventloopLag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportEventloopLag(start: [number, number])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:148\n                            \n                        \n\n\n                \n                    \n                            Reports the event-loop lag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                        \n                                                                    [number, number]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:108\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:122\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8EventLoop.ts:73\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of event-loop metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    Scheduler,\n    SimpleGauge,\n} from \"inspector-metrics\";\n\n/**\n * Metric set with values related to the nodejs event loop.\n *\n * @export\n * @class V8EventLoop\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8EventLoop extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains all the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8EventLoop\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Holds the event-loop lag in microseconds.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8EventLoop\n     */\n    private eventLoopLag: SimpleGauge;\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8EventLoop\n     */\n    private timer: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8EventLoop.\n     *\n     * @param {string} name\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof V8EventLoop\n     */\n    public constructor(name: string, scheduler: Scheduler = setInterval) {\n        super();\n        this.name = name;\n\n        this.eventLoopLag = new SimpleGauge(\n            \"lag\",\n            \"measures the duration between committing a function to the event loop and the function being executed\",\n        );\n\n        this.metrics.push(this.eventLoopLag);\n        this.timer = scheduler(async () => {\n            setImmediate((start) => this.reportEventloopLag(start), process.hrtime());\n        }, 500);\n    }\n\n    /**\n     * Stops the recording of event-loop metrics.\n     *\n     * @memberof V8EventLoop\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8EventLoop\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8EventLoop\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @returns {this}\n     * @memberof V8EventLoop\n     */\n    public setGroup(group: string): this {\n        this.group = group;\n        this.eventLoopLag.setGroup(group);\n        return this;\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof V8EventLoop\n     */\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n        this.eventLoopLag.setTag(name, value);\n        return this;\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof V8EventLoop\n     */\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n        this.eventLoopLag.removeTag(name);\n        return this;\n    }\n\n    /**\n     * Reports the event-loop lag.\n     *\n     * @private\n     * @param {[number, number]} start\n     * @memberof V8EventLoop\n     */\n    private reportEventloopLag(start: [number, number]) {\n        const delta = process.hrtime(start);\n        const nanosec = delta[0] * 1e9 + delta[1];\n        this.eventLoopLag.setValue(nanosec);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8GCMetrics.html":{"url":"classes/V8GCMetrics.html","title":"class - V8GCMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8GCMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8GCMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to nodejs GC.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allRuns\n                            \n                            \n                                    Private\n                                gc\n                            \n                            \n                                    Private\n                                incrementalMarkingRuns\n                            \n                            \n                                    Private\n                                majorRuns\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                minorRuns\n                            \n                            \n                                    Private\n                                phantomCallbackProcessingRuns\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, clock: Clock)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8GCMetrics.ts:84\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8GCMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            allRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        allRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:76\n                            \n                        \n\n                \n                    \n                        Timer for all gc runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            gc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        gc:     EventEmitter\n\n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:84\n                            \n                        \n\n                \n                    \n                        Garbage collection data emitter.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            incrementalMarkingRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        incrementalMarkingRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:60\n                            \n                        \n\n                \n                    \n                        Timer for the gc incremental marking runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            majorRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        majorRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:52\n                            \n                        \n\n                \n                    \n                        Timer for the gc major runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:36\n                            \n                        \n\n                \n                    \n                        Contains all the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            minorRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minorRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:44\n                            \n                        \n\n                \n                    \n                        Timer for the gc minor runs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            phantomCallbackProcessingRuns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        phantomCallbackProcessingRuns:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:68\n                            \n                        \n\n                \n                    \n                        Timer for the gc callback processing runs.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:170\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:158\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:216\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:181\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:199\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8GCMetrics.ts:148\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of gc metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { EventEmitter } from \"events\";\nimport {\n    BaseMetric,\n    Clock,\n    DefaultReservoir,\n    Metric,\n    MetricSet,\n    NANOSECOND,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Event emitter for GC event within nodejs.\n */\nconst GC = require(\"gc-stats\");\n\n/**\n * Metric set with values related to nodejs GC.\n *\n * @export\n * @class V8GCMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8GCMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains all the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8GCMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Timer for the gc minor runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private minorRuns: Timer;\n    /**\n     * Timer for the gc major runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private majorRuns: Timer;\n    /**\n     * Timer for the gc incremental marking runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private incrementalMarkingRuns: Timer;\n    /**\n     * Timer for the gc callback processing runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private phantomCallbackProcessingRuns: Timer;\n    /**\n     * Timer for all gc runs.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof V8GCMetrics\n     */\n    private allRuns: Timer;\n    /**\n     * Garbage collection data emitter.\n     *\n     * @private\n     * @type {EventEmitter}\n     * @memberof V8GCMetrics\n     */\n    private gc: EventEmitter;\n\n    /**\n     * Creates an instance of V8GCMetrics.\n     *\n     * @param {string} name\n     * @param {Clock} clock\n     * @memberof V8GCMetrics\n     */\n    public constructor(name: string, clock: Clock) {\n        super();\n        this.name = name;\n\n        this.minorRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.minorRuns.setTag(\"type\", \"minor\");\n\n        this.majorRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.majorRuns.setTag(\"type\", \"major\");\n\n        this.incrementalMarkingRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.incrementalMarkingRuns.setTag(\"type\", \"IncrementalMarking\");\n\n        this.phantomCallbackProcessingRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.phantomCallbackProcessingRuns.setTag(\"type\", \"PhantomCallbackProcessing\");\n\n        this.allRuns = new Timer(clock, new DefaultReservoir(1024), \"runs\");\n        this.allRuns.setTag(\"type\", \"all\");\n\n        this.metrics.push(this.allRuns);\n        this.metrics.push(this.incrementalMarkingRuns);\n        this.metrics.push(this.majorRuns);\n        this.metrics.push(this.minorRuns);\n        this.metrics.push(this.phantomCallbackProcessingRuns);\n\n        const slf = this;\n        this.gc = GC();\n        this.gc.on(\"stats\", function(stats: any) {\n            const duration = stats.pause;\n\n            switch (stats.gctype) {\n                case 1:\n                    slf.minorRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 2:\n                    slf.majorRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 4:\n                    slf.incrementalMarkingRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 8:\n                    slf.phantomCallbackProcessingRuns.addDuration(duration, NANOSECOND);\n                    break;\n                case 15:\n                    slf.allRuns.addDuration(duration, NANOSECOND);\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Stops the recording of gc metrics.\n     *\n     * @memberof V8GCMetrics\n     */\n    public stop(): void {\n        this.gc.removeAllListeners();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8GCMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8GCMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @returns {this}\n     * @memberof V8GCMetrics\n     */\n    public setGroup(group: string): this {\n        this.group = group;\n        this.allRuns.setGroup(group);\n        this.incrementalMarkingRuns.setGroup(group);\n        this.majorRuns.setGroup(group);\n        this.minorRuns.setGroup(group);\n        this.phantomCallbackProcessingRuns.setGroup(group);\n        return this;\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof V8GCMetrics\n     */\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n        this.allRuns.setTag(name, value);\n        this.incrementalMarkingRuns.setTag(name, value);\n        this.majorRuns.setTag(name, value);\n        this.minorRuns.setTag(name, value);\n        this.phantomCallbackProcessingRuns.setTag(name, value);\n        return this;\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof V8GCMetrics\n     */\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n        this.allRuns.removeTag(name);\n        this.incrementalMarkingRuns.removeTag(name);\n        this.majorRuns.removeTag(name);\n        this.minorRuns.removeTag(name);\n        this.phantomCallbackProcessingRuns.removeTag(name);\n        return this;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8MemoryMetrics.html":{"url":"classes/V8MemoryMetrics.html","title":"class - V8MemoryMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8MemoryMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8MemoryMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the memory nodejs uses.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                heapSizeLimit\n                            \n                            \n                                    Private\n                                intervalRef\n                            \n                            \n                                    Private\n                                mallocedMemory\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                peakMallocedMemory\n                            \n                            \n                                    Private\n                                spaces\n                            \n                            \n                                    Private\n                                totalAvailableSize\n                            \n                            \n                                    Private\n                                totalHeapSize\n                            \n                            \n                                    Private\n                                totalHeapSizeExecutable\n                            \n                            \n                                    Private\n                                totalPhysicalSize\n                            \n                            \n                                    Private\n                                usedHeapSize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, sampleRate: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8MemoryMetrics.ts:171\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8MemoryMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sampleRate\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            heapSizeLimit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heapSizeLimit:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"heapSizeLimit\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:147\n                            \n                        \n\n                \n                    \n                        Maximum heap size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            intervalRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        intervalRef:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:171\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            mallocedMemory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        mallocedMemory:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"mallocedMemory\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:155\n                            \n                        \n\n                \n                    \n                        Allocated memory.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:91\n                            \n                        \n\n                \n                    \n                        Contains all the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            peakMallocedMemory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        peakMallocedMemory:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"peakMallocedMemory\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:163\n                            \n                        \n\n                \n                    \n                        Maximum allocated memory.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            spaces\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        spaces:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:99\n                            \n                        \n\n                \n                    \n                        Stores the size gauges for different speces.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalAvailableSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalAvailableSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalAvailableSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:115\n                            \n                        \n\n                \n                    \n                        Total availabel size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalHeapSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalHeapSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalHeapSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:107\n                            \n                        \n\n                \n                    \n                        Total heap size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalHeapSizeExecutable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalHeapSizeExecutable:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalHeapSizeExecutable\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:131\n                            \n                        \n\n                \n                    \n                        Total heap size for executable code.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            totalPhysicalSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        totalPhysicalSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"totalPhysicalSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:123\n                            \n                        \n\n                \n                    \n                        Total physical size.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            usedHeapSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        usedHeapSize:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                    \n                        \n                            Default value : new SimpleGauge(\"usedHeapSize\")\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:139\n                            \n                        \n\n                \n                    \n                        Used heap size.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:251\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:239\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:320\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:262\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:292\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8MemoryMetrics.ts:229\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of memory metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    SimpleGauge,\n} from \"inspector-metrics\";\nimport * as v8 from \"v8\";\n\n/**\n * A collection of {@link SimpleGauge} values for space metrics.\n *\n * @export\n * @class SpaceHistory\n */\nexport class SpaceHistory {\n\n    /**\n     * Total size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public size: SimpleGauge;\n    /**\n     * Used size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public usedSize: SimpleGauge;\n    /**\n     * Available size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public availableSize: SimpleGauge;\n    /**\n     * Physical size.\n     *\n     * @type {SimpleGauge}\n     * @memberof SpaceHistory\n     */\n    public physicalSize: SimpleGauge;\n\n    /**\n     * Creates an instance of SpaceHistory.\n     *\n     * @param {string} spaceName\n     * @param {Metric[]} metrics\n     * @memberof SpaceHistory\n     */\n    public constructor(spaceName: string, metrics: Metric[]) {\n        this.size = new SimpleGauge(\"spaceSize\");\n        this.usedSize = new SimpleGauge(\"spaceUsedSize\");\n        this.availableSize = new SimpleGauge(\"spaceAvailableSize\");\n        this.physicalSize = new SimpleGauge(\"spacePhysicalSize\");\n\n        this.size.setTag(\"space\", spaceName);\n        this.usedSize.setTag(\"space\", spaceName);\n        this.availableSize.setTag(\"space\", spaceName);\n        this.physicalSize.setTag(\"space\", spaceName);\n\n        metrics.push(this.size);\n        metrics.push(this.usedSize);\n        metrics.push(this.availableSize);\n        metrics.push(this.physicalSize);\n    }\n\n}\n\n/**\n * Metric set with values related to the memory nodejs uses.\n *\n * @export\n * @class V8MemoryMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8MemoryMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains all the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Stores the size gauges for different speces.\n     *\n     * @private\n     * @type {Map}\n     * @memberof V8MemoryMetrics\n     */\n    private spaces: Map = new Map();\n    /**\n     * Total heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSize: SimpleGauge = new SimpleGauge(\"totalHeapSize\");\n    /**\n     * Total availabel size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalAvailableSize: SimpleGauge = new SimpleGauge(\"totalAvailableSize\");\n    /**\n     * Total physical size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalPhysicalSize: SimpleGauge = new SimpleGauge(\"totalPhysicalSize\");\n    /**\n     * Total heap size for executable code.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private totalHeapSizeExecutable: SimpleGauge = new SimpleGauge(\"totalHeapSizeExecutable\");\n    /**\n     * Used heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private usedHeapSize: SimpleGauge = new SimpleGauge(\"usedHeapSize\");\n    /**\n     * Maximum heap size.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private heapSizeLimit: SimpleGauge = new SimpleGauge(\"heapSizeLimit\");\n    /**\n     * Allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private mallocedMemory: SimpleGauge = new SimpleGauge(\"mallocedMemory\");\n    /**\n     * Maximum allocated memory.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8MemoryMetrics\n     */\n    private peakMallocedMemory: SimpleGauge = new SimpleGauge(\"peakMallocedMemory\");\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8MemoryMetrics\n     */\n    private intervalRef: NodeJS.Timer;\n\n    /**\n     * Creates an instance of V8MemoryMetrics.\n     *\n     * @param {string} name\n     * @param {number} [sampleRate=1000]\n     * @memberof V8MemoryMetrics\n     */\n    public constructor(name: string, sampleRate = 1000) {\n        super();\n        this.name = name;\n\n        this.metrics.push(this.totalHeapSize);\n        this.metrics.push(this.totalPhysicalSize);\n        this.metrics.push(this.totalAvailableSize);\n        this.metrics.push(this.totalHeapSizeExecutable);\n        this.metrics.push(this.usedHeapSize);\n        this.metrics.push(this.heapSizeLimit);\n        this.metrics.push(this.mallocedMemory);\n        this.metrics.push(this.peakMallocedMemory);\n\n        this.spaces.set(\"new_space\", new SpaceHistory(\"new_space\", this.metrics));\n        this.spaces.set(\"old_space\", new SpaceHistory(\"old_space\", this.metrics));\n        this.spaces.set(\"code_space\", new SpaceHistory(\"code_space\", this.metrics));\n        this.spaces.set(\"map_space\", new SpaceHistory(\"map_space\", this.metrics));\n        this.spaces.set(\"large_object_space\", new SpaceHistory(\"large_object_space\", this.metrics));\n\n        this.intervalRef = global.setInterval(() => {\n            const heapSpaceStatistics = v8.getHeapSpaceStatistics();\n            const heapStatistics = v8.getHeapStatistics();\n\n            this.totalHeapSize.setValue(heapStatistics.total_heap_size);\n            this.totalPhysicalSize.setValue(heapStatistics.total_physical_size);\n            this.totalAvailableSize.setValue(heapStatistics.total_available_size);\n            this.totalHeapSizeExecutable.setValue(heapStatistics.total_heap_size_executable);\n            this.usedHeapSize.setValue(heapStatistics.used_heap_size);\n            this.heapSizeLimit.setValue(heapStatistics.heap_size_limit);\n            this.mallocedMemory.setValue(heapStatistics.heap_size_limit);\n            this.peakMallocedMemory.setValue(heapStatistics.heap_size_limit);\n\n            heapSpaceStatistics.forEach((heapSpaceStatistic) => {\n                if (this.spaces.has(heapSpaceStatistic.space_name)) {\n                    const history = this.spaces.get(heapSpaceStatistic.space_name);\n                    history.availableSize.setValue(heapSpaceStatistic.space_available_size);\n                    history.physicalSize.setValue(heapSpaceStatistic.physical_space_size);\n                    history.size.setValue(heapSpaceStatistic.space_size);\n                    history.usedSize.setValue(heapSpaceStatistic.space_used_size);\n                }\n            });\n        }, sampleRate);\n    }\n\n    /**\n     * Stops the recording of memory metrics.\n     *\n     * @memberof V8MemoryMetrics\n     */\n    public stop(): void {\n        this.intervalRef.unref();\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8MemoryMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @returns {this}\n     * @memberof V8MemoryMetrics\n     */\n    public setGroup(group: string): this {\n        this.group = group;\n\n        this.totalHeapSize.setGroup(group);\n        this.totalAvailableSize.setGroup(group);\n        this.totalPhysicalSize.setGroup(group);\n        this.totalHeapSizeExecutable.setGroup(group);\n        this.usedHeapSize.setGroup(group);\n        this.heapSizeLimit.setGroup(group);\n        this.mallocedMemory.setGroup(group);\n        this.peakMallocedMemory.setGroup(group);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setGroup(group);\n            history.physicalSize.setGroup(group);\n            history.size.setGroup(group);\n            history.usedSize.setGroup(group);\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof V8MemoryMetrics\n     */\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n\n        this.totalHeapSize.setTag(name, value);\n        this.totalAvailableSize.setTag(name, value);\n        this.totalPhysicalSize.setTag(name, value);\n        this.totalHeapSizeExecutable.setTag(name, value);\n        this.usedHeapSize.setTag(name, value);\n        this.heapSizeLimit.setTag(name, value);\n        this.mallocedMemory.setTag(name, value);\n        this.peakMallocedMemory.setTag(name, value);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.setTag(name, value);\n            history.physicalSize.setTag(name, value);\n            history.size.setTag(name, value);\n            history.usedSize.setTag(name, value);\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @memberof V8MemoryMetrics\n     */\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n\n        this.totalHeapSize.removeTag(name);\n        this.totalAvailableSize.removeTag(name);\n        this.totalPhysicalSize.removeTag(name);\n        this.totalHeapSizeExecutable.removeTag(name);\n        this.usedHeapSize.removeTag(name);\n        this.heapSizeLimit.removeTag(name);\n        this.mallocedMemory.removeTag(name);\n        this.peakMallocedMemory.removeTag(name);\n\n        this.spaces.forEach((history) => {\n            history.availableSize.removeTag(name);\n            history.physicalSize.removeTag(name);\n            history.size.removeTag(name);\n            history.usedSize.removeTag(name);\n        });\n\n        return this;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/V8ProcessMetrics.html":{"url":"classes/V8ProcessMetrics.html","title":"class - V8ProcessMetrics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  V8ProcessMetrics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/V8ProcessMetrics.ts\n        \n\n            \n                Description\n            \n            \n                Metric set with values related to the nodejs process.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        MetricSet\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeHandles\n                            \n                            \n                                    Private\n                                activeRequests\n                            \n                            \n                                    Private\n                                cpuSystemUsage\n                            \n                            \n                                    Private\n                                cpuTotalUsage\n                            \n                            \n                                    Private\n                                cpuUserUsage\n                            \n                            \n                                    Private\n                                lastUsage\n                            \n                            \n                                    Private\n                                metrics\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMetricList\n                            \n                            \n                                    Public\n                                getMetrics\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                stop\n                            \n                            \n                                    Private\n                                update\n                            \n                            \n                                    Private\n                                updateActiveHandles\n                            \n                            \n                                    Private\n                                updateActiveRequests\n                            \n                            \n                                    Private\n                                updateCpuUsage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name: string, scheduler: Scheduler)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/V8ProcessMetrics.ts:85\n                            \n                        \n\n                \n                    \n                            Creates an instance of V8ProcessMetrics.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                    Scheduler\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeHandles\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeHandles:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:37\n                            \n                        \n\n                \n                    \n                        Tracks the active handle count.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeRequests\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeRequests:     SimpleGauge\n\n                    \n                \n                    \n                        \n                            Type :     SimpleGauge\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:45\n                            \n                        \n\n                \n                    \n                        Tracks the active request count.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuSystemUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuSystemUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:53\n                            \n                        \n\n                \n                    \n                        Tracks the cpu system usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuTotalUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuTotalUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:61\n                            \n                        \n\n                \n                    \n                        Tracks the cpu total usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            cpuUserUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        cpuUserUsage:     MonotoneCounter\n\n                    \n                \n                    \n                        \n                            Type :     MonotoneCounter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:69\n                            \n                        \n\n                \n                    \n                        Tracks the cpu user usage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            lastUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        lastUsage:     NodeJS.CpuUsage\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.CpuUsage\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:85\n                            \n                        \n\n                \n                    \n                        Last cpu usage object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            metrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metrics:     Metric[]\n\n                    \n                \n                    \n                        \n                            Type :     Metric[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:29\n                            \n                        \n\n                \n                    \n                        Contains all the metrics in this metric-set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:77\n                            \n                        \n\n                \n                    \n                        The timer reference from the scheduler.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:148\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:136\n                            \n                        \n\n\n                \n                    \n                            Gets all metrics.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:198\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag from this metric-set and all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:159\n                            \n                        \n\n\n                \n                    \n                            Sets the group of this metric-set as well as all contained metrics.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:179\n                            \n                        \n\n\n                \n                    \n                            Sets the tags of this metric-set all contained metrics accordingly.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:124\n                            \n                        \n\n\n                \n                    \n                            Stops the recording of process metrics.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:210\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateActiveHandles\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateActiveHandles()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:216\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateActiveRequests\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateActiveRequests()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:223\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            updateCpuUsage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        updateCpuUsage()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/V8ProcessMetrics.ts:230\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport {\n    BaseMetric,\n    Metric,\n    MetricSet,\n    MonotoneCounter,\n    Scheduler,\n    SimpleGauge,\n} from \"inspector-metrics\";\n\n/**\n * Metric set with values related to the nodejs process.\n *\n * @export\n * @class V8ProcessMetrics\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class V8ProcessMetrics extends BaseMetric implements MetricSet {\n\n    /**\n     * Contains all the metrics in this metric-set.\n     *\n     * @private\n     * @type {Metric[]}\n     * @memberof V8ProcessMetrics\n     */\n    private metrics: Metric[] = [];\n    /**\n     * Tracks the active handle count.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8ProcessMetrics\n     */\n    private activeHandles: SimpleGauge;\n    /**\n     * Tracks the active request count.\n     *\n     * @private\n     * @type {SimpleGauge}\n     * @memberof V8ProcessMetrics\n     */\n    private activeRequests: SimpleGauge;\n    /**\n     * Tracks the cpu system usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuSystemUsage: MonotoneCounter;\n    /**\n     * Tracks the cpu total usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuTotalUsage: MonotoneCounter;\n    /**\n     * Tracks the cpu user usage.\n     *\n     * @private\n     * @type {MonotoneCounter}\n     * @memberof V8ProcessMetrics\n     */\n    private cpuUserUsage: MonotoneCounter;\n    /**\n     * The timer reference from the scheduler.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof V8ProcessMetrics\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Last cpu usage object.\n     *\n     * @private\n     * @type {NodeJS.CpuUsage}\n     * @memberof V8ProcessMetrics\n     */\n    private lastUsage: NodeJS.CpuUsage;\n\n    /**\n     * Creates an instance of V8ProcessMetrics.\n     *\n     * @param {string} name\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof V8ProcessMetrics\n     */\n    public constructor(name: string, scheduler: Scheduler = setInterval) {\n        super();\n        this.name = name;\n\n        this.cpuSystemUsage = new MonotoneCounter(\"cpu_usage\", \"System CPU time spent in microseconds\");\n        this.cpuSystemUsage.setTag(\"type\", \"system\");\n\n        this.cpuTotalUsage = new MonotoneCounter(\"cpu_usage\", \"Total user and system CPU time spent in microseconds\");\n        this.cpuTotalUsage.setTag(\"type\", \"total\");\n\n        this.cpuUserUsage = new MonotoneCounter(\"cpu_usage\", \"User CPU time spent in microseconds\");\n        this.cpuUserUsage.setTag(\"type\", \"user\");\n\n        this.activeHandles = new SimpleGauge(\"active_handles\", \"Number of active handles\");\n        this.activeRequests = new SimpleGauge(\"active_requests\", \"Number of active requests\");\n\n        this.metrics.push(this.activeHandles);\n        this.metrics.push(this.activeRequests);\n        this.metrics.push(this.cpuSystemUsage);\n        this.metrics.push(this.cpuTotalUsage);\n        this.metrics.push(this.cpuUserUsage);\n\n        this.timer = scheduler(async () => this.update(), 1000);\n    }\n\n    /**\n     * Stops the recording of process metrics.\n     *\n     * @memberof V8ProcessMetrics\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Map}\n     * @memberof V8ProcessMetrics\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics.forEach((metric) => map.set(metric.getName(), metric));\n        return map;\n    }\n\n    /**\n     * Gets all metrics.\n     *\n     * @returns {Metric[]}\n     * @memberof V8ProcessMetrics\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics;\n    }\n\n    /**\n     * Sets the group of this metric-set as well as all contained metrics.\n     *\n     * @param {string} group\n     * @returns {this}\n     * @memberof V8ProcessMetrics\n     */\n    public setGroup(group: string): this {\n        this.group = group;\n\n        this.activeHandles.setGroup(group);\n        this.activeRequests.setGroup(group);\n        this.cpuSystemUsage.setGroup(group);\n        this.cpuTotalUsage.setGroup(group);\n        this.cpuUserUsage.setGroup(group);\n\n        return this;\n    }\n\n    /**\n     * Sets the tags of this metric-set all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @returns {this}\n     * @memberof V8ProcessMetrics\n     */\n    public setTag(name: string, value: string): this {\n        this.tags.set(name, value);\n\n        this.activeHandles.setTag(name, value);\n        this.activeRequests.setTag(name, value);\n        this.cpuSystemUsage.setTag(name, value);\n        this.cpuTotalUsage.setTag(name, value);\n        this.cpuUserUsage.setTag(name, value);\n\n        return this;\n    }\n\n    /**\n     * Removes the specified tag from this metric-set and all contained metrics accordingly.\n     *\n     * @param {string} name\n     * @returns {this}\n     * @memberof V8ProcessMetrics\n     */\n    public removeTag(name: string): this {\n        this.tags.delete(name);\n\n        this.activeHandles.removeTag(name);\n        this.activeRequests.removeTag(name);\n        this.cpuSystemUsage.removeTag(name);\n        this.cpuTotalUsage.removeTag(name);\n        this.cpuUserUsage.removeTag(name);\n\n        return this;\n    }\n\n    private update() {\n        this.updateActiveHandles();\n        this.updateActiveRequests();\n        this.updateCpuUsage();\n    }\n\n    private updateActiveHandles() {\n        const p = process as any;\n        if (typeof p._getActiveHandles === \"function\") {\n            this.activeHandles.setValue(p._getActiveHandles().length);\n        }\n    }\n\n    private updateActiveRequests() {\n        const p = process as any;\n        if (typeof p._getActiveRequests === \"function\") {\n            this.activeRequests.setValue(p._getActiveRequests().length);\n        }\n    }\n\n    private updateCpuUsage() {\n        const cpuUsage = process.cpuUsage();\n        const userUsageMicros = cpuUsage.user - this.lastUsage.user;\n        const systemUsageMicros = cpuUsage.system - this.lastUsage.system;\n\n        this.lastUsage = cpuUsage;\n\n        this.cpuSystemUsage.increment(systemUsageMicros);\n        this.cpuTotalUsage.increment(userUsageMicros + systemUsageMicros);\n        this.cpuUserUsage.increment(userUsageMicros);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/V8EventLoop.ts\n            \n            \n                class\n            \n            \n                V8EventLoop\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/metrics/V8GCMetrics.ts\n            \n            \n                class\n            \n            \n                V8GCMetrics\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/metrics/V8GCMetrics.ts\n            \n            \n                variable\n            \n            \n                GC\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/V8MemoryMetrics.ts\n            \n            \n                class\n            \n            \n                SpaceHistory\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/V8MemoryMetrics.ts\n            \n            \n                class\n            \n            \n                V8MemoryMetrics\n            \n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                lib/metrics/V8ProcessMetrics.ts\n            \n            \n                class\n            \n            \n                V8ProcessMetrics\n            \n            \n                80 %\n                (16/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            gc-stats : ^1.2.1\n        \n            inspector-metrics : ^1.15.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-vm\nNodeJS VM Metric Collector\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-vm\nbasic usage\nimport { MetricRegistry } from \"inspector-metrics\";\nimport {\n    V8EventLoop,\n    V8MemoryMetrics,\n    V8GCMetrics\n} from \"inspector-vm\";\n\n// get a registry\nconst registry: MetricRegistry = ...;\n\n// instance the memory metric, contains\n//   - space statistics\n//   - memory statistics\nconst memoryMetrics: V8MemoryMetrics = new V8MemoryMetrics(\"v8\");\n//   - gc statistics\nconst gc: V8GCMetrics = new V8GCMetrics(\"gc\", registry.getDefaultClock());\n//   - event loop delay / latency\nconst eventLoop: V8EventLoop = new V8EventLoop(\"eventLoop\");\n//   - cpu_usage (system, user, total)\n//   - active_handles\n//   - active_requests\nconst processMetric: V8ProcessMetrics = new V8ProcessMetrics(\"process\");\n\n// metric is registered und the name \"v8\"\nregistry.registerMetric(memoryMetrics);\n// metric is registered und the name \"gc\"\nregistry.registerMetric(gc);\n// metric is registered und the name \"eventLoop\"\nregistry.registerMetric(eventLoop);\n// metric is registered und the name \"process\"\nregistry.registerMetric(processMetric);\n\n// setup reporter ...\n\n// note that unstopped metrics can cause the application to keep running\nmemoryMetrics.stop();\ngc.stop();\neventLoop.stop();\nprocessMetric.stop();License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /mnt/c/git/inspector-vm/lib/metrics/V8GCMetrics.ts\n            \n            \n                81 %\n                (52/64)\n            \n            \n                0 %\n                (0/5)\n            \n            \n                89 %\n                (8/9)\n            \n            \n                81 %\n                (51/63)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-vm/lib/metrics/V8MemoryMetrics.ts\n            \n            \n                85 %\n                (94/111)\n            \n            \n                33 %\n                (1/3)\n            \n            \n                86 %\n                (12/14)\n            \n            \n                85 %\n                (93/110)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GC   (lib/.../V8GCMetrics.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/V8GCMetrics.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GC\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        GC:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"gc-stats\")\n                        \n                    \n\n                \n                    \n                        Event emitter for GC event within nodejs.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
